{"version":3,"sources":["../../main/test/test.js"],"names":["expect","goodLuck","currentYear","studentInfo","wrongStudentName","wrongStudentYearAdmitted","wrongStudentSchool","wrongStudentYearOfSd","describe","it","admitted","to","be","equal","a","an","getYearOfAdmission","getStudentInfo","deep","graduate"],"mappings":"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","file":"test.js","sourcesContent":["import chai from 'chai';\r\nimport  Student  from './../src/student';\r\nimport { name } from './../src/student';\r\nconst  expect = chai.expect;\r\n\r\nconst goodLuck = new Student('Goodluck', 2017, 'Delsu', 4 );\r\n// current year to be 2019\r\nconst currentYear = 2019;\r\nconst studentInfo = {\r\n\t\t\t\t'name':'Goodluck',\r\n\t\t\t\t'dateOfAdmision': 2017,\r\n\t\t\t\t'nameOfSchool':'Delsu',\r\n\t\t\t\t'durationOfStudy': 4,\r\n\t\t\t\t'expectedToGraduate': 2021\r\n\t\t\t}\r\nconst wrongStudentName = ['Harray', 2017, 'Delsu', 4];\r\nconst wrongStudentYearAdmitted = ['Goodluck', 2018, 'Delsu', 4];\r\nconst wrongStudentSchool = ['Goodluck', 2017, 'Uniben', 4];\r\nconst wrongStudentYearOfSd = ['Goodluck', 2017, 'Uniben', 5]  \r\ndescribe (\"Student class\", () => {\r\n\tdescribe('Invalid cases', () => {\r\n\t\tit('should return false for wrong name', () => {\r\n\t\t\texpect(goodLuck.admitted(wrongStudentName)).to.be.equal(false);\r\n\t\t});\r\n\t\tit('should return false for wrong name', () => {\r\n\t\t\texpect(goodLuck.admitted(wrongStudentSchool)).to.be.equal(false);\r\n\t\t});\r\n\t\tit('should return false for wrong name', () => {\r\n\t\t\texpect(goodLuck.admitted(wrongStudentYearAdmitted)).to.be.equal(false);\r\n\t\t});\r\n\t\tit('should return false for wrong name', () => {\r\n\t\t\texpect(goodLuck.admitted(wrongStudentYearOfSd)).to.be.equal(false);\r\n\t\t});\r\n\t})\r\n\tdescribe(\"Student\", () => {\r\n\t\tit('should export a function', () => {\r\n\t\t\texpect(Student).to.be.a(\"function\")\r\n\t\t});\r\n\t\tit('class instance should be an object', () => {\r\n\t\t\texpect(goodLuck).to.be.an('Object')\r\n\t\t});\r\n\t\tit('should be confirmed as admitted to a school', () => {\r\n\t\t\texpect(goodLuck.admitted('Goodluck', 2017, 'Delsu', 4)).to.be.equal(true)\r\n\t\t});\r\n\t\tit('class instance should be an object', () => {\r\n\t\t\texpect(goodLuck.getYearOfAdmission('Goodluck')).to.be.equal(2017)\r\n\t\t});\r\n\t\tit('class instance should be an object', () => {\r\n\t\t\texpect(goodLuck.getStudentInfo('Goodluck')).to.be.deep.equal(studentInfo);\r\n\t\t});\r\n\t\tit('should return the expected years remaining for study', () => {\r\n\t\t\t// 2 represent -> 2 year from current year\r\n\t\t\texpect(goodLuck.graduate('Goodluck',  currentYear)).to.be.equal(2)\r\n\t\t});\r\n\t\tit('should respond that the student have graduated', () => {\r\n\t\t\texpect(goodLuck.graduate('Goodluck', 2021)).to.be.equal('Graduated')\r\n\t\t});\r\n\t})\r\n});\r\n"]}