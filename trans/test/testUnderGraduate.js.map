{"version":3,"sources":["../../main/test/testUnderGraduate.js"],"names":["expect","assert","promise","studentInfo","topic","describe","it","to","be","a","writeProject","not","equal","checkProjectWritten","an","instanceOf"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAMA,SAAS,eAAKA,MAApB;AACA,IAAMC,SAAS,eAAKA,MAApB;AACA,IAAMC,UAAU,4BAAkB,SAAlB,EAA6B,IAA7B,EAAmC,SAAnC,EAA8C,CAA9C,CAAhB;AACA,IAAMC,cAAc;AAChB,SAAO,SADS;AAEhB,mBAAkB,IAFF;AAGhB,iBAAe,SAHC;AAIhB,oBAAmB,CAJH;AAKhB,uBAAsB;AALN,CAApB;AAOA,IAAMC,QAAQ,sBAAd;;AAEAC,SAAU,6BAAV,EAAyC,YAAM;AAC9CA,UAAU,eAAV,EAA2B,YAAM;AAC/BC,KAAG,6BAAH,EAAkC,YAAM;AACvCN,mCAAsBO,EAAtB,CAAyBC,EAAzB,CAA4BC,CAA5B,CAA8B,UAA9B;AACA,GAFD;AAGAH,KAAG,gCAAH,EAAqC,YAAM;AAC3CN,UAAOE,QAAQQ,YAAR,CAAqB,sBAArB,CAAP,EAAqDH,EAArD,CAAwDI,GAAxD,CAA4DC,KAA5D,CAAkE,wBAAlE;AACE,GAFF;AAGAN,KAAG,gCAAH,EAAqC,YAAM;AAC3CN,UAAOE,QAAQW,mBAAR,CAA4B,sBAA5B,CAAP,EAA4DN,EAA5D,CAA+DI,GAA/D,CAAmEC,KAAnE,CAAyE,KAAzE;AACE,GAFF;AAGD,EAVD;;AAYAP,UAAU,aAAV,EAAyB,YAAM;AAC7BC,KAAG,6BAAH,EAAkC,YAAM;AACvCN,mCAAsBO,EAAtB,CAAyBC,EAAzB,CAA4BC,CAA5B,CAA8B,UAA9B;AACA,GAFD;AAGAH,KAAG,uBAAH,EAA4B,YAAM;AACjCN,UAAOE,OAAP,EAAgBK,EAAhB,CAAmBC,EAAnB,CAAsBM,EAAtB,CAAyB,QAAzB;AACA,GAFD;AAGAR,KAAG,uBAAH,EAA4B,YAAM;AACjCL,UAAOc,UAAP,CAAkBb,OAAlB;AACA,GAFD;AAGAI,KAAG,gCAAH,EAAqC,YAAM;AAC3CN,UAAOE,QAAQQ,YAAR,CAAqB,sBAArB,CAAP,EAAqDH,EAArD,CAAwDC,EAAxD,CAA2DI,KAA3D,CAAiE,sBAAjE;AACE,GAFF;AAGAN,KAAG,gCAAH,EAAqC,YAAM;AAC3CN,UAAOE,QAAQW,mBAAR,CAA4B,sBAA5B,CAAP,EAA4DN,EAA5D,CAA+DC,EAA/D,CAAkEI,KAAlE,CAAwE,IAAxE;AACE,GAFF;AAGD,EAhBD;AAiBA,CA9BD","file":"testUnderGraduate.js","sourcesContent":["\r\nimport chai from 'chai';\r\nimport UnderGraduate from './../src/underGraduate';\r\nimport  Student from './../src/Student';\r\nconst expect = chai.expect;\r\nconst assert = chai.assert;\r\nconst promise = new UnderGraduate('Promise', 2016, 'Uniport', 4);\r\nconst studentInfo = {\r\n\t\t\t\t'name':'Promise',\r\n\t\t\t\t'dateOfAdmision': 2016,\r\n\t\t\t\t'nameOfSchool':'Uniport',\r\n\t\t\t\t'durationOfStudy': 4,\r\n\t\t\t\t'expectedToGraduate': 2019\r\n\t\t\t}\r\nconst topic = 'My bootcamp projects';\r\n\r\ndescribe ('UnderGraduate student class', () => {\r\n\tdescribe ('invalid Cases', () => {\r\n\t\t it('UnderGraduate student class', () => {\r\n\t\t \texpect(UnderGraduate).to.be.a(\"function\")\r\n\t\t });\r\n\t\t it('should return The project topc', () => {\r\n\t\t\texpect(promise.writeProject('My bootcamp projects')).to.not.equal('An other project topic');\r\n\t  \t});\r\n\t\t it('should return return a boolean', () => {\r\n\t\t\texpect(promise.checkProjectWritten('My bootcamp projects')).to.not.equal(false);\r\n\t   });\r\n\t});\r\n\r\n\tdescribe ('Valid Cases', () => {\r\n\t\t it('UnderGraduate student class', () => {\r\n\t\t \texpect(UnderGraduate).to.be.a(\"function\")\r\n\t\t });\r\n\t\t it('College student class', () => {\r\n\t\t \texpect(promise).to.be.an('Object')\r\n\t\t });\r\n\t\t it('College student class', () => {\r\n\t\t \tassert.instanceOf(promise, UnderGraduate);\r\n\t\t });\r\n\t\t it('should return The project topc', () => {\r\n\t\t\texpect(promise.writeProject('My bootcamp projects')).to.be.equal('My bootcamp projects');\r\n\t  \t});\r\n\t\t it('should return return a boolean', () => {\r\n\t\t\texpect(promise.checkProjectWritten('My bootcamp projects')).to.be.equal(true);\r\n\t   });\r\n\t});\r\n})\r\n\r\n"]}